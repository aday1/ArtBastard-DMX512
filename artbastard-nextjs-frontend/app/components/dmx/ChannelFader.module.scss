@import '../../styles/variables';
@use 'sass:color';

.channelFader {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: $background-dark-secondary;
  border: 1px solid $background-dark-tertiary;
  border-radius: $border-radius * 2;
  padding: $spacing-unit * 1.5;
  width: 100px; // Adjust as needed, or make responsive
  height: 320px; // Fixed height for consistent layout
  cursor: pointer;
  transition: border-color $transition-fast, box-shadow $transition-fast;
  user-select: none; // Prevent text selection when clicking

  &:hover {
    border-color: color.scale($primary-color, $lightness: -10%);
    box-shadow: 0 0 10px rgba($primary-color, 0.3);
  }

  &.selected {
    border-color: $secondary-color;
    box-shadow: 0 0 12px rgba($secondary-color, 0.5), $inset-glow-effect;

    .header .name {
      color: $secondary-color;
    }
  }
}

.header {
  width: 100%;
  text-align: center;
  margin-bottom: $spacing-unit;

  .address {
    font-size: $font-size-sm;
    color: $text-color-muted;
    display: block;
  }

  .name {
    font-size: $font-size-base;
    font-weight: 500;
    color: $text-color-light;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%; // Ensure it doesn't overflow the container
    transition: color $transition-fast;
  }
}

.faderContainer {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; // Distribute space for buttons and fader
  width: 100%;
  position: relative; // For absolute positioning of step buttons if needed
}

.faderTrackWrapper {
  height: 150px; // Main fader interaction area
  width: 20px; // Width of the visual track area
  // background-color: $background-dark-tertiary; // Base color, fill is dynamic
  border-radius: $border-radius;
  position: relative;
  display: flex;
  justify-content: center;
  margin: ($spacing-unit * 0.5) 0; // Some space around the fader itself
  // Dynamic background fill using the CSS variable set by JS
  background: linear-gradient(to top,
    rgba($primary-color, 0.7) 0%,
    rgba($primary-color, 0.7) var(--value-percent-dynamic, 0%),
    $background-dark-tertiary var(--value-percent-dynamic, 0%),
    $background-dark-tertiary 100%);
}

.fader {
  -webkit-appearance: none;
  appearance: none;
  width: 150px; // This becomes the height due to rotation
  height: 20px; // This becomes the width due to rotation
  background: transparent; // Track styling handled by faderTrackWrapper
  cursor: pointer;
  transform-origin: 75px 75px; // Center of the original width/height
  transform: rotate(-90deg);
  position: absolute;
  top: 65px; // (150px - 20px) / 2 to center the rotated track
  left: -65px; // (20px - 150px) / 2 to center the rotated track

  // Webkit (Chrome, Safari, Edge)
  &::-webkit-slider-runnable-track {
    width: 100%;
    height: 100%;
    background: transparent;
    border-radius: $border-radius;
  }

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 30px;
    height: 20px;
    background-color: $secondary-color;
    border-radius: $border-radius / 2;
    border: 2px solid color.scale($secondary-color, $lightness: -20%);
    margin-top: 0px;
    transition: background-color $transition-fast;

    &:hover {
      background-color: color.scale($secondary-color, $lightness: 10%);
    }
    &:active {
      background-color: color.scale($secondary-color, $lightness: -10%);
    }
  }

  // Firefox
  &::-moz-range-track {
    width: 100%;
    height: 100%;
    background: transparent;
    border-radius: $border-radius;
  }

  &::-moz-range-thumb {
    width: 30px;
    height: 20px;
    background-color: $secondary-color;
    border-radius: $border-radius / 2;
    border: 2px solid color.scale($secondary-color, $lightness: -20%);
    transition: background-color $transition-fast;

    &:hover {
      background-color: color.scale($secondary-color, $lightness: 10%);
    }
    &:active {
      background-color: color.scale($secondary-color, $lightness: -10%);
    }
  }
}


.stepButton {
  background-color: $background-dark-tertiary;
  color: $text-color-light;
  border: 1px solid color.scale($background-dark-tertiary, $lightness: 10%);
  border-radius: $border-radius;
  padding: $spacing-unit * 0.5 $spacing-unit;
  font-size: $font-size-sm;
  cursor: pointer;
  transition: background-color $transition-fast, color $transition-fast;
  width: 60px; // Fixed width for consistency
  display: flex;
  align-items: center;
  justify-content: center;
  gap: $spacing-unit * 0.5;

  &:hover {
    background-color: color.scale($primary-color, $alpha: -0.7);
    color: $secondary-color;
  }
  &:active {
    background-color: color.scale($primary-color, $alpha: -0.5);
  }

  svg { // FontAwesomeIcon
    font-size: 0.8em;
  }
}

.plusButton { margin-bottom: $spacing-unit * 0.5; }
.minusButton { margin-top: $spacing-unit * 0.5; }
.plusButtonSmall { margin-bottom: $spacing-unit * 0.5; width: 40px; font-size: $font-size-sm * 0.9;}
.minusButtonSmall { margin-top: $spacing-unit * 0.5; width: 40px; font-size: $font-size-sm * 0.9;}


.valueDisplay {
  width: 100%;
  margin-top: $spacing-unit;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.valueInput {
  width: 60px;
  padding: $spacing-unit * 0.5;
  font-size: $font-size-base;
  text-align: center;
  background-color: $background-dark-primary;
  color: $text-color-light;
  border: 1px solid $background-dark-tertiary;
  border-radius: $border-radius;
  margin-bottom: $spacing-unit * 0.5;

  &:focus {
    outline: none;
    border-color: $primary-color;
    box-shadow: 0 0 0 2px rgba($primary-color, 0.3);
  }
}

.percentage {
  font-size: $font-size-sm;
  color: $text-color-muted;
}

// Commented out as dynamic fill is handled by .faderTrackWrapper's background
// .fader::-webkit-slider-runnable-track {
//   background: linear-gradient(to top, var(--primary-color) 0%, var(--primary-color) var(--value-percent-dynamic), $background-dark-tertiary var(--value-percent-dynamic), $background-dark-tertiary 100%);
// }
