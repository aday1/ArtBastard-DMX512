import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
import axios from 'axios'
import { Socket } from 'socket.io-client'

export interface MidiMapping {
  channel: number
  note?: number
  controller?: number
}

export interface Fixture {
  id: string
  name: string
  type: string
  manufacturer?: string
  model?: string
  mode?: string
  startAddress: number
  channels: { name: string; type: string; dmxAddress?: number }[]
  notes?: string
  flags?: FixtureFlag[]
  isFlagged?: boolean
}

export interface FixtureFlag {
  id: string
  name: string
  color: string
  priority?: number
  category?: string
}

export interface Group {
  id: string;
  name: string;
  fixtureIndices: number[];
  lastStates: number[];
  position?: { x: number; y: number };
  isMuted: boolean;
  isSolo: boolean;
  masterValue: number;
  midiMapping?: MidiMapping;
  oscAddress?: string;
  ignoreSceneChanges?: boolean;
  ignoreMasterFader?: boolean;
  panOffset?: number;
  tiltOffset?: number;
  zoomValue?: number;
}

export interface Scene {
  name: string
  channelValues: number[]
  oscAddress: string
  midiMapping?: MidiMapping
}

export interface ArtNetConfig {
  ip: string
  subnet: number
  universe: number
  net: number
  port: number
  base_refresh_interval: number
}

export interface OscConfig {
  host: string
  port: number
  sendEnabled: boolean
  sendHost: string
  sendPort: number
}

export interface OscActivity {
  value: number
  timestamp: number
}

export interface OscMessage {
  address: string;
  args: Array<{ type: string; value: any }>;
  source?: string;
  timestamp?: number;
}

export interface PlacedFixture {
  id: string;
  fixtureId: string;
  fixtureStoreId: string;
  name: string;
  x: number;
  y: number;
  color: string;
  radius: number;
  startAddress: number;
  controls?: PlacedControl[];
}

export interface PlacedControl {
  id: string;
  channelNameInFixture: string;
  type: 'slider' | 'xypad';
  label: string;
  xOffset: number;
  yOffset: number;
  currentValue: number;
  panValue?: number;
  tiltValue?: number;
  panChannelName?: string;
  tiltChannelName?: string;
}

export interface MasterSliderTarget {
  placedFixtureId: string;
  channelIndex: number;
  channelNameInFixture: string;
  minRange: number;
  maxRange: number;
}

export interface MasterSlider {
  id: string;
  name: string;
  value: number;
  targets: MasterSliderTarget[];
  position: { x: number; y: number };
  midiMapping?: MidiMapping;
}

export interface TimelineKeyframe {
  time: number;
  value: number;
  curve: 'linear' | 'smooth' | 'step' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'bezier';
  controlPoint1?: { x: number; y: number };
  controlPoint2?: { x: number; y: number };
}

export interface TimelineSequence {
  id: string;
  name: string;
  description?: string;
  duration: number;
  channels: Array<{
    channel: number;
    keyframes: TimelineKeyframe[];
  }>;
  tags?: string[];
  createdAt: number;
  modifiedAt: number;
}

export interface TimelinePreset {
  id: string;
  name: string;
  description: string;
  generator: (duration: number, amplitude?: number, frequency?: number, phase?: number) => TimelineKeyframe[];
}

export interface Notification {
  id: string;
  message: string;
  type: 'success' | 'error' | 'info' | 'warning';
  priority?: 'low' | 'normal' | 'high';
  dismissible?: boolean;
  timestamp: number;
}

export type AddNotificationInput = Omit<Notification, 'id' | 'timestamp'>;
export type DmxChannelBatchUpdate = Record<number, number>;

interface AutoSceneSettings {
  autoSceneEnabled: boolean;
  autoSceneList: string[];
  autoSceneMode: 'forward' | 'ping-pong' | 'random';
  autoSceneBeatDivision: number;
  autoSceneManualBpm: number;
  autoSceneTapTempoBpm: number;
  autoSceneTempoSource: 'internal_clock' | 'manual_bpm' | 'tap_tempo';
}

// Helper function for timeline value interpolation
function interpolateChannelValue(keyframes: TimelineKeyframe[], time: number): number | undefined {
  if (keyframes.length === 0) return undefined;
  if (keyframes.length === 1) return keyframes[0].value;

  let prevFrame = keyframes[0];
  let nextFrame = keyframes[keyframes.length - 1];

  for (let i = 0; i < keyframes.length - 1; i++) {
    if (keyframes[i].time <= time && keyframes[i + 1].time > time) {
      prevFrame = keyframes[i];
      nextFrame = keyframes[i + 1];
      break;
    }
  }

  if (prevFrame === nextFrame) {
    return prevFrame.value;
  }

  const progress = (time - prevFrame.time) / (nextFrame.time - prevFrame.time);

  switch (prevFrame.curve) {
    case 'step':
      return prevFrame.value;
    
    case 'linear':
      return prevFrame.value + (nextFrame.value - prevFrame.value) * progress;
    
    case 'smooth':
      const t = progress * progress * (3 - 2 * progress);
      return prevFrame.value + (nextFrame.value - prevFrame.value) * t;
    
    case 'ease-in':
      const ti = progress * progress;
      return prevFrame.value + (nextFrame.value - prevFrame.value) * ti;
    
    case 'ease-out':
      const to = 1 - Math.pow(1 - progress, 2);
      return prevFrame.value + (nextFrame.value - prevFrame.value) * to;
    
    case 'ease-in-out':
      const tio = progress < 0.5
        ? 2 * progress * progress
        : 1 - Math.pow(-2 * progress + 2, 2) / 2;
      return prevFrame.value + (nextFrame.value - prevFrame.value) * tio;
    
    case 'bezier':
      if (prevFrame.controlPoint1 && prevFrame.controlPoint2) {
        const t = progress;
        const u = 1 - t;
        const tt = t * t;
        const uu = u * u;
        const uuu = uu * u;
        const ttt = tt * t;
        
        const p0 = prevFrame.value;
        const p1 = prevFrame.controlPoint1.y;
        const p2 = prevFrame.controlPoint2.y;
        const p3 = nextFrame.value;
        
        return uuu * p0 + 3 * uu * t * p1 + 3 * u * tt * p2 + ttt * p3;
      }
      return prevFrame.value + (nextFrame.value - prevFrame.value) * progress;
    
    default:
      return prevFrame.value + (nextFrame.value - prevFrame.value) * progress;
  }
}

interface State {
  // DMX State
  dmxChannels: number[]
  oscAssignments: string[]
  channelNames: string[]
  selectedChannels: number[]
  
  // Navigation State
  navVisibility: {
    main: boolean
    midiOsc: boolean
    fixture: boolean
    scenes: boolean
    audio: boolean
    touchosc: boolean
    misc: boolean
  }

  // Debug State
  debugTools: {
    debugButton: boolean
    midiMonitor: boolean
    oscMonitor: boolean
  }

  // MIDI State
  midiInterfaces: string[]
  activeInterfaces: string[]
  midiMappings: Record<number, MidiMapping | undefined>
  midiLearnTarget:
    | { type: 'masterSlider'; id: string }
    | { type: 'dmxChannel'; channelIndex: number }
    | { type: 'placedControl'; fixtureId: string; controlId: string }
    | { type: 'group'; groupId: string }
    | null
  midiLearnScene: string | null
  midiMessages: any[]
  oscMessages: OscMessage[]
  midiActivity: number

  // Audio/BPM State
  bpm: number
  isPlaying: boolean

  // Debug State
  debugModules: {
    midi: boolean
    osc: boolean
    artnet: boolean
    button: boolean
  }

  // Fixtures and Groups
  fixtures: Fixture[]
  groups: Group[]
  
  // Scenes
  scenes: Scene[]
  
  // Configuration
  artNetConfig: ArtNetConfig
  oscConfig: OscConfig
  artNetStatus: 'connected' | 'disconnected' | 'error' | 'timeout'
  
  // UI State
  theme: 'artsnob' | 'standard' | 'minimal'
  darkMode: boolean
  notifications: Notification[]
  uiSettings: {
    sparklesEnabled: boolean
  }
  
  oscActivity: Record<number, OscActivity>
  exampleSliderValue: number
  fixtureLayout: PlacedFixture[]
  placedFixtures: PlacedFixture[]
  masterSliders: MasterSlider[]
  canvasBackgroundImage: HTMLImageElement | null

  // Scene Transition State
  isTransitioning: boolean
  transitionStartTime: number | null
  transitionDuration: number
  fromDmxValues: number[] | null
  toDmxValues: number[] | null
  currentTransitionFrame: number | null
  
  // Socket state
  socket: Socket | null
  setSocket: (socket: Socket | null) => void

  // Timeline Sequence Management
  timelineSequences: TimelineSequence[]
  activeTimelineSequence: string | null
  timelineEditMode: boolean
  timelinePresets: TimelinePreset[]
  timelinePlayback: {
    active: boolean
    sequenceId: string | null
    startTime: number | null
    position: number
    loop: boolean
  }

  // Actions
  fetchInitialState: () => Promise<void>
  getDmxChannelValue: (channel: number) => number
  setDmxChannel: (channel: number, value: number) => void
  setMultipleDmxChannels: (updates: DmxChannelBatchUpdate) => void
  setDmxChannelValue: (channel: number, value: number) => void
  setDmxChannelsForTransition: (values: number[]) => void
  setCurrentTransitionFrameId: (frameId: number | null) => void
  clearTransitionState: () => void
  setTransitionDuration: (duration: number) => void
  selectChannel: (channel: number) => void
  deselectChannel: (channel: number) => void
  toggleChannelSelection: (channel: number) => void
  selectAllChannels: () => void
  deselectAllChannels: () => void
  invertChannelSelection: () => void
  setOscAssignment: (channelIndex: number, address: string) => void
  reportOscActivity: (channelIndex: number, value: number) => void
  addOscMessage: (message: OscMessage) => void

  // MIDI Actions
  startMidiLearn: (target: { type: 'masterSlider', id: string } | { type: 'dmxChannel', channelIndex: number } | { type: 'group', id: string }) => void
  cancelMidiLearn: () => void
  addMidiMessage: (message: any) => void
  addMidiMapping: (dmxChannel: number, mapping: MidiMapping) => void
  removeMidiMapping: (dmxChannel: number) => void
  clearAllMidiMappings: () => void
  
  // Scene Actions
  saveScene: (name: string, oscAddress: string) => void
  loadScene: (name: string) => void
  deleteScene: (name: string) => void
  updateScene: (originalName: string, updates: Partial<Scene>) => void

  // Config Actions
  updateArtNetConfig: (config: Partial<ArtNetConfig>) => void
  updateDebugModules: (debugSettings: {midi?: boolean; osc?: boolean; artnet?: boolean; button?: boolean}) => void
  testArtNetConnection: () => void
  
  // UI Actions
  setTheme: (theme: 'artsnob' | 'standard' | 'minimal') => void
  toggleDarkMode: () => void
  updateUiSettings: (settings: Partial<{ sparklesEnabled: boolean }>) => void
  toggleSparkles: () => void
  addNotification: (notification: AddNotificationInput) => void
  removeNotification: (id: string) => void
  clearAllNotifications: () => void
  setExampleSliderValue: (value: number) => void
  setBpm: (bpm: number) => void
  setIsPlaying: (isPlaying: boolean) => void
  setMidiActivity: (activity: number) => void

  // Layout Actions
  setFixtureLayout: (layout: PlacedFixture[]) => void
  setCanvasBackgroundImage: (image: HTMLImageElement | null) => void
  addMasterSlider: (slider: MasterSlider) => void
  updateMasterSliderValue: (sliderId: string, value: number) => void
  updateMasterSlider: (sliderId: string, updatedSlider: Partial<MasterSlider>) => void
  removeMasterSlider: (sliderId: string) => void
  setMasterSliders: (sliders: MasterSlider[]) => void

  // Timeline Management Actions
  loadTimelineSequence: (sequenceId: string) => void
  deleteTimelineSequence: (sequenceId: string) => void
  updateTimelineSequence: (sequenceId: string, updates: Partial<TimelineSequence>) => void
  exportTimelineSequence: (sequenceId: string) => void
  importTimelineSequence: (file: File) => void
  smoothTimelineSequence: (sequenceId: string, smoothingFactor?: number) => void
  playTimelineSequence: (sequenceId: string) => void
  stopTimelinePlayback: () => void
  generateTimelinePresets: () => void
  createTimelineFromPreset: (presetId: string, name: string, channels: number[], config: {
    duration: number
    amplitude?: number
    frequency?: number
    phase?: number
  }) => string | null
}

export const useStore = create(
  devtools(
    (set, get): State => ({
      // Initial state
      timelineSequences: [
        {
          id: 'moving-head-example',
          name: 'Example: Moving Head Pan/Tilt',
          description: 'A smooth figure-eight pattern using pan and tilt channels',
          duration: 10000, // 10 seconds
          channels: [
            {
              channel: 1, // Pan channel
              keyframes: [
                { time: 0, value: 0, curve: 'smooth' },
                { time: 2500, value: 255, curve: 'smooth' },
                { time: 5000, value: 0, curve: 'smooth' },
                { time: 7500, value: 255, curve: 'smooth' },
                { time: 10000, value: 0, curve: 'smooth' }
              ]
            },
            {
              channel: 2, // Tilt channel
              keyframes: [
                { time: 0, value: 127, curve: 'smooth' },
                { time: 2500, value: 255, curve: 'smooth' },
                { time: 5000, value: 127, curve: 'smooth' },
                { time: 7500, value: 0, curve: 'smooth' },
                { time: 10000, value: 127, curve: 'smooth' }
              ]
            }
          ],
          tags: ['example', 'moving head', 'pan/tilt'],
          createdAt: Date.now(),
          modifiedAt: Date.now()
        },
        {
          id: 'blank-timeline',
          name: 'Blank Timeline', 
          description: 'A fresh timeline ready for your creativity',
          duration: 5000, // 5 seconds
          channels: [], // No channels initially
          tags: ['template'],
          createdAt: Date.now(),
          modifiedAt: Date.now()
        }
      ],
      activeTimelineSequence: null,
      timelineEditMode: false,
      timelinePresets: [],
      timelinePlayback: {
        active: false,
        sequenceId: null,
        startTime: null,
        position: 0,
        loop: false
      },

      // Rest of initial state
      dmxChannels: new Array(512).fill(0),
      oscAssignments: new Array(512).fill(''),
      channelNames: new Array(512).fill(''),
      selectedChannels: [],
      navVisibility: {
        main: true,
        midiOsc: false,
        fixture: false,
        scenes: false,
        audio: false,
        touchosc: false,
        misc: false
      },
      debugTools: {
        debugButton: false,
        midiMonitor: false,
        oscMonitor: false
      },
      midiInterfaces: [],
      activeInterfaces: [],
      midiMappings: {},
      midiLearnTarget: null,
      midiLearnScene: null,
      midiMessages: [],
      midiActivity: 0,
      oscMessages: [],
      bpm: 120,
      isPlaying: false,
      debugModules: {
        midi: false,
        osc: false,
        artnet: false,
        button: false
      },
      fixtures: [],
      groups: [],
      scenes: [],
      artNetConfig: {
        ip: '127.0.0.1',
        subnet: 0,
        universe: 0,
        net: 0,
        port: 6454,
        base_refresh_interval: 1000/30
      },
      oscConfig: {
        host: '127.0.0.1',
        port: 8000,
        sendEnabled: false,
        sendHost: '127.0.0.1',
        sendPort: 9000
      },
      artNetStatus: 'disconnected',
      theme: 'artsnob',
      darkMode: true,
      uiSettings: {
        sparklesEnabled: true
      },
      notifications: [],
      oscActivity: {},
      exampleSliderValue: 0,
      fixtureLayout: [],
      placedFixtures: [],
      masterSliders: [],
      canvasBackgroundImage: null,
      isTransitioning: false,
      transitionStartTime: null,
      transitionDuration: 500,
      fromDmxValues: null,
      toDmxValues: null,
      currentTransitionFrame: null,
      socket: null,

      // Timeline Management Actions
      loadTimelineSequence: (sequenceId) => {
        const timelineSequences = get().timelineSequences;
        const sequence = timelineSequences.find(s => s.id === sequenceId);
        if (!sequence) {
          console.warn(`Timeline sequence ${sequenceId} not found`);
          return;
        }

        set({
          activeTimelineSequence: sequenceId,
          timelinePlayback: {
            ...get().timelinePlayback,
            sequenceId,
            position: 0,
            startTime: null,
            active: false,
          }
        });
      },

      deleteTimelineSequence: (sequenceId) => {
        set(state => {
          const timelineSequences = state.timelineSequences.filter(s => s.id !== sequenceId);
          const activeTimelineSequence = state.activeTimelineSequence === sequenceId 
            ? null 
            : state.activeTimelineSequence;

          if (state.timelinePlayback.sequenceId === sequenceId) {
            get().stopTimelinePlayback(); // Stop playback if deleting active sequence
          }

          return {
            timelineSequences,
            activeTimelineSequence,
          };
        });
      },

      updateTimelineSequence: (sequenceId, updates) => {
        set(state => ({
          timelineSequences: state.timelineSequences.map(sequence => 
            sequence.id === sequenceId 
              ? { ...sequence, ...updates, modifiedAt: Date.now() }
              : sequence
          )
        }));
      },

      exportTimelineSequence: async (sequenceId) => {
        const sequences = get().timelineSequences;
        const sequence = sequences.find(s => s.id === sequenceId);
        if (!sequence) return;

        const blob = new Blob([JSON.stringify(sequence, null, 2)], { type: 'application/json' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${sequence.name.replace(/\s+/g, '_')}-timeline.json`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      },

      importTimelineSequence: async (file) => {
        try {
          const text = await file.text();
          const sequence: TimelineSequence = JSON.parse(text);
          
          // Generate new ID to avoid conflicts
          const newSequence = {
            ...sequence,
            id: crypto.randomUUID(),
            modifiedAt: Date.now(),
            createdAt: Date.now(),
          };

          set(state => ({
            timelineSequences: [...state.timelineSequences, newSequence]
          }));

        } catch (error) {
          console.error('Failed to import timeline sequence:', error);
        }
      },

      smoothTimelineSequence: (sequenceId, smoothingFactor = 0.5) => {
        set(state => {
          const sequence = state.timelineSequences.find(s => s.id === sequenceId);
          if (!sequence) return state;

          const smoothedChannels = sequence.channels.map(channel => ({
            ...channel,
            keyframes: channel.keyframes.map((kf, i, arr) => {
              // Skip first and last keyframes
              if (i === 0 || i === arr.length - 1) return kf;

              const prev = arr[i - 1];
              const next = arr[i + 1];

              // Calculate weighted average for value
              const smoothedValue = (
                prev.value * smoothingFactor +
                kf.value * (1 - smoothingFactor * 2) +
                next.value * smoothingFactor
              );

              return { ...kf, value: smoothedValue };
            })
          }));

          return {
            timelineSequences: state.timelineSequences.map(s =>
              s.id === sequenceId
                ? { ...s, channels: smoothedChannels, modifiedAt: Date.now() }
                : s
            )
          };
        });
      },

      playTimelineSequence: (sequenceId) => {
        const sequence = get().timelineSequences.find(s => s.id === sequenceId);
        if (!sequence) return;

        set({
          timelinePlayback: {
            active: true,
            sequenceId,
            startTime: Date.now(),
            position: 0,
            loop: get().timelinePlayback.loop,
          }
        });

        // Start playback loop
        const playbackLoop = () => {
          const state = get();
          if (!state.timelinePlayback.active) return;

          const currentTime = Date.now();
          const elapsedTime = currentTime - (state.timelinePlayback.startTime || currentTime);
          const newPosition = (elapsedTime % sequence.duration) / sequence.duration;

          // Update DMX values based on timeline position
          sequence.channels.forEach(channel => {
            const value = interpolateChannelValue(channel.keyframes, newPosition * sequence.duration);
            if (value !== undefined) {
              get().setDmxChannelValue(channel.channel, value);
            }
          });

          // Update position
          set(state => ({
            timelinePlayback: {
              ...state.timelinePlayback,
              position: newPosition,
            }
          }));

          // Request next frame if still active
          if (get().timelinePlayback.active) {
            requestAnimationFrame(playbackLoop);
          }
        };

        requestAnimationFrame(playbackLoop);
      },

      stopTimelinePlayback: () => {
        set({
          timelinePlayback: {
            ...get().timelinePlayback,
            active: false,
            position: 0,
            startTime: null,
          }
        });
      },

      generateTimelinePresets: () => {
        const commonPresets: TimelinePreset[] = [
          {
            id: 'sine',
            name: 'Sine Wave',
            description: 'Smooth oscillating motion',
            generator: (duration, amplitude = 127.5, frequency = 1, phase = 0) => {
              const steps = Math.max(10, Math.floor(duration / 100));
              const keyframes: TimelineKeyframe[] = [];

              for (let i = 0; i <= steps; i++) {
                const time = (i / steps) * duration;
                const value = 127.5 + amplitude * Math.sin(2 * Math.PI * frequency * (time / duration) + phase);
                keyframes.push({
                  time,
                  value: Math.max(0, Math.min(255, value)),
                  curve: 'smooth'
                });
              }

              return keyframes;
            }
          },
          {
            id: 'triangle',
            name: 'Triangle Wave',
            description: 'Linear ramping motion',
            generator: (duration, amplitude = 127.5, frequency = 1) => {
              const steps = Math.max(10, Math.floor(duration / 100));
              const keyframes: TimelineKeyframe[] = [];

              for (let i = 0; i <= steps; i++) {
                const time = (i / steps) * duration;
                const phase = (time / duration) * frequency;
                const triangleValue = 2 * amplitude * Math.abs((phase % 1) - 0.5);
                keyframes.push({
                  time,
                  value: Math.max(0, Math.min(255, 127.5 + triangleValue - amplitude)),
                  curve: 'linear'
                });
              }

              return keyframes;
            }
          },
          {
            id: 'square',
            name: 'Square Wave',
            description: 'On/off switching motion',
            generator: (duration, amplitude = 127.5, frequency = 1) => {
              const steps = frequency * 2; // Two points per cycle (high and low)
              const keyframes: TimelineKeyframe[] = [];
              
              for (let i = 0; i <= steps; i++) {
                const time = (i / steps) * duration;
                const value = i % 2 === 0 ? 127.5 + amplitude : 127.5 - amplitude;
                keyframes.push({
                  time,
                  value: Math.max(0, Math.min(255, value)),
                  curve: 'step'
                });
              }

              return keyframes;
            }
          }
        ];

        set({ timelinePresets: commonPresets });
      },

      createTimelineFromPreset: (presetId, name, channels, config) => {
        const preset = get().timelinePresets.find(p => p.id === presetId);
        if (!preset) return null;

        const sequence: TimelineSequence = {
          id: crypto.randomUUID(),
          name,
          duration: config.duration,
          channels: channels.map(channel => ({
            channel,
            keyframes: preset.generator(
              config.duration,
              config.amplitude,
              config.frequency,
              config.phase
            )
          })),
          createdAt: Date.now(),
          modifiedAt: Date.now()
        };

        set(state => ({
          timelineSequences: [...state.timelineSequences, sequence]
        }));

        return sequence.id;
      },

      // Example basic DMX actions
      setDmxChannelValue: (channel: number, value: number) => {
        set(state => {
          const dmxChannels = [...state.dmxChannels];
          dmxChannels[channel] = value;
          return { dmxChannels };
        });
      },

      setSocket: (socket: Socket | null) => set({ socket }),
      
      // ... other action implementations ...
    }))
  )
);
