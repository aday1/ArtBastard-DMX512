import React, { useState, useEffect, useRef } from 'react';
import { useStore } from '../../store';
import { LucideIcon } from '../ui/LucideIcon';
import { SuperControlExportOptions, exportSuperControlToToscFile } from '../../utils/touchoscExporter';
import styles from './SuperControl.module.scss';

interface SuperControlProps {
  isDockable?: boolean;
}

type SelectionMode = 'channels' | 'fixtures' | 'groups' | 'capabilities';

interface FixtureCapability {
  type: string;
  fixtures: string[];
}

const SuperControl: React.FC<SuperControlProps> = ({ isDockable = false }) => {
  const { 
    fixtures, 
    groups,
    selectedChannels,
    getDmxChannelValue, 
    setDmxChannelValue,
    // Smooth DMX Functions
    smoothDmxEnabled,
    setSmoothDmxChannelValue,
    enableSmoothDmxMode,
    flushSmoothDmxUpdates,
    // Autopilot Track System
    autopilotTrackEnabled,
    autopilotTrackType,
    autopilotTrackPosition,
    autopilotTrackSize,
    autopilotTrackSpeed,
    autopilotTrackCenterX,
    autopilotTrackCenterY,
    autopilotTrackAutoPlay,
    setAutopilotTrackEnabled,
    setAutopilotTrackType,
    setAutopilotTrackPosition,
    setAutopilotTrackSize,
    setAutopilotTrackSpeed,
    setAutopilotTrackCenter,
    setAutopilotTrackAutoPlay,
    updatePanTiltFromTrack
  } = useStore();

  // Selection state
  const [selectionMode, setSelectionMode] = useState<SelectionMode>('channels');
  const [selectedFixtures, setSelectedFixtures] = useState<string[]>([]);
  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);
  const [selectedCapabilities, setSelectedCapabilities] = useState<string[]>([]);

  // Control values state
  const [dimmer, setDimmer] = useState(255);
  const [panValue, setPanValue] = useState(127);
  const [tiltValue, setTiltValue] = useState(127);
  const [red, setRed] = useState(255);
  const [green, setGreen] = useState(255);
  const [blue, setBlue] = useState(255);
  const [gobo, setGobo] = useState(0);
  const [shutter, setShutter] = useState(255);
  const [strobe, setStrobe] = useState(0);
  const [lamp, setLamp] = useState(255);
  const [reset, setReset] = useState(0);

  // XY Pad state
  const [panTiltXY, setPanTiltXY] = useState({ x: 50, y: 50 });
  const xyPadRef = useRef<HTMLDivElement>(null);
  const [isDraggingXY, setIsDraggingXY] = useState(false);

  // Color wheel state
  const [colorHue, setColorHue] = useState(0);
  const [colorSaturation, setColorSaturation] = useState(100);
  const colorWheelRef = useRef<HTMLDivElement>(null);
  const [isDraggingColor, setIsDraggingColor] = useState(false);

  // MIDI Learn state
  const [midiLearnTarget, setMidiLearnTarget] = useState<string | null>(null);
  const [oscAddresses, setOscAddresses] = useState<Record<string, string>>({
    dimmer: '/supercontrol/dimmer',
    pan: '/supercontrol/pan',
    tilt: '/supercontrol/tilt',
    red: '/supercontrol/red',
    green: '/supercontrol/green',
    blue: '/supercontrol/blue',
    gobo: '/supercontrol/gobo',
    shutter: '/supercontrol/shutter',
    strobe: '/supercontrol/strobe',
    lamp: '/supercontrol/lamp',
    reset: '/supercontrol/reset',
    panTiltXY: '/supercontrol/pantilt/xy',
    colorWheel: '/supercontrol/color/wheel',
    autopilotEnable: '/supercontrol/autopilot/enable',
    autopilotSpeed: '/supercontrol/autopilot/speed',
    sceneNext: '/supercontrol/scene/next',
    scenePrev: '/supercontrol/scene/prev',
    sceneSave: '/supercontrol/scene/save',
  });

  // Enhanced MIDI Learn state with range support
  const [midiMappings, setMidiMappings] = useState<Record<string, {
    channel?: number;
    note?: number;
    cc?: number;
    minValue: number;
    maxValue: number;
    oscAddress?: string;
  }>>({});

  // Scene management state
  const [scenes, setScenes] = useState<Array<{
    id: string;
    name: string;
    values: Record<number, number>; // DMX channel -> value
    timestamp: number;
  }>>([]);
  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);
  const [sceneAutoSave, setSceneAutoSave] = useState(false);

  // TouchOSC Export state
  const [showTouchOscExport, setShowTouchOscExport] = useState(false);
  const [touchOscExportOptions, setTouchOscExportOptions] = useState<SuperControlExportOptions>({
    resolution: 'tablet_portrait',
    includeBasicControls: true,
    includePanTilt: true,
    includeColorWheel: true,
    includeXYPad: true,
    includeEffects: true,
    includeAutopilot: true,
    includeQuickActions: true,
    includeSceneControls: true,
    includeNavigation: true,
  });
  const [touchOscExportStatus, setTouchOscExportStatus] = useState<{
    isExporting: boolean;
    message: string;
    isSuccess: boolean;
  }>({
    isExporting: false,
    message: '',
    isSuccess: false,
  });

  // TouchOSC Export function
  const handleTouchOscExport = async () => {
    setTouchOscExportStatus({ isExporting: true, message: 'Generating TouchOSC layout...', isSuccess: false });
    
    try {
      const result = await exportSuperControlToToscFile(
        touchOscExportOptions,
        `ArtBastard_SuperControl_${new Date().toISOString().slice(0, 10)}.tosc`
      );
      
      if (result.success) {
        setTouchOscExportStatus({ isExporting: false, message: 'TouchOSC export successful!', isSuccess: true });
        setTimeout(() => {
          setTouchOscExportStatus({ isExporting: false, message: '', isSuccess: false });
          setShowTouchOscExport(false);
        }, 3000);
      } else {
        setTouchOscExportStatus({ isExporting: false, message: result.message || 'Export failed', isSuccess: false });
      }
    } catch (error) {
      setTouchOscExportStatus({ 
        isExporting: false, 
        message: `Export failed: ${error instanceof Error ? error.message : String(error)}`, 
        isSuccess: false 
      });
    }
  };

  // Helper functions
  const getFixtureCapabilities = (): FixtureCapability[] => {
    const capabilities: Record<string, string[]> = {};
    
    fixtures.forEach(fixture => {
      fixture.channels.forEach(channel => {
        const type = channel.type;
        if (!capabilities[type]) {
          capabilities[type] = [];
        }
        if (!capabilities[type].includes(fixture.name)) {
          capabilities[type].push(fixture.name);
        }
      });
    });
    
    return Object.entries(capabilities).map(([type, fixtures]) => ({
      type,
      fixtures
    }));
  };

  const getAffectedFixtures = () => {
    console.log(`getAffectedFixtures called - selectionMode: ${selectionMode}`);
    console.log(`Selected channels: ${selectedChannels.length}`, selectedChannels);
    console.log(`Selected fixtures: ${selectedFixtures.length}`, selectedFixtures);
    console.log(`Selected groups: ${selectedGroups.length}`, selectedGroups);

    if (selectionMode === 'channels' && selectedChannels.length > 0) {
      // Find fixtures that contain the selected channels
      const affectedFixtures = fixtures.filter(fixture => 
        fixture.channels.some(channel => 
          selectedChannels.includes(channel.dmxAddress || 0)
        )
      );
      console.log(`Channel mode: found ${affectedFixtures.length} affected fixtures`);
      return affectedFixtures;
    }
    
    if (selectionMode === 'fixtures' && selectedFixtures.length > 0) {
      const affectedFixtures = fixtures.filter(fixture => 
        selectedFixtures.includes(fixture.name)
      );
      console.log(`Fixture mode: found ${affectedFixtures.length} affected fixtures`);
      return affectedFixtures;
    }
    
    if (selectionMode === 'groups' && selectedGroups.length > 0) {
      const groupFixtures = groups
        .filter(group => selectedGroups.includes(group.name))
        .flatMap(group => group.fixtureIndices.map(idx => fixtures[idx]?.name).filter(Boolean));
      
      const affectedFixtures = fixtures.filter(fixture => 
        groupFixtures.includes(fixture.name)
      );
      console.log(`Group mode: found ${affectedFixtures.length} affected fixtures`);
      return affectedFixtures;
    }
    
    if (selectionMode === 'capabilities' && selectedCapabilities.length > 0) {
      const affectedFixtures = fixtures.filter(fixture => 
        fixture.channels.some(channel => 
          selectedCapabilities.includes(channel.type)
        )
      );
      console.log(`Capability mode: found ${affectedFixtures.length} affected fixtures`);
      return affectedFixtures;
    }
    
    console.log('No fixtures affected - no valid selection');
    return [];
  };

  const applyControl = (controlType: string, value: number) => {
    const affectedFixtures = getAffectedFixtures();
    console.log(`applyControl called: type=${controlType}, value=${value}, fixtures=${affectedFixtures.length}`);
    
    if (affectedFixtures.length === 0) {
      console.log('No fixtures to apply control to');
      return;
    }
    
    affectedFixtures.forEach((fixture, index) => {
      const channels = fixture.channels;
      let targetChannel = -1;
      
      // Find the target channel based on control type
      switch (controlType) {        case 'dimmer':
          targetChannel = channels.find(c => c.type === 'dimmer')?.dmxAddress ?? -1;
          break;
        case 'pan':
          targetChannel = channels.find(c => c.type === 'pan')?.dmxAddress ?? -1;
          break;
        case 'tilt':
          targetChannel = channels.find(c => c.type === 'tilt')?.dmxAddress ?? -1;
          break;
        case 'red':
          targetChannel = channels.find(c => c.type === 'red')?.dmxAddress ?? -1;
          break;
        case 'green':
          targetChannel = channels.find(c => c.type === 'green')?.dmxAddress ?? -1;
          break;
        case 'blue':
          targetChannel = channels.find(c => c.type === 'blue')?.dmxAddress ?? -1;
          break;
        case 'gobo':
          targetChannel = channels.find(c => c.type === 'gobo')?.dmxAddress ?? -1;
          break;
        case 'shutter':
          targetChannel = channels.find(c => c.type === 'shutter')?.dmxAddress ?? -1;
          break;
        case 'strobe':
          targetChannel = channels.find(c => c.type === 'strobe')?.dmxAddress ?? -1;
          break;
        case 'lamp':
          targetChannel = channels.find(c => c.type === 'lamp')?.dmxAddress ?? -1;
          break;
        case 'reset':
          targetChannel = channels.find(c => c.type === 'reset')?.dmxAddress ?? -1;
          break;
      }
      
      if (targetChannel >= 0) {
        console.log(`[DMX] Setting channel ${targetChannel} to ${value} for ${controlType}`);
        setSmoothDmxChannelValue(targetChannel, value);
        
        // Verification
        setTimeout(() => {
          const actualValue = getDmxChannelValue(targetChannel);
          console.log(`[DMX] Verification: Channel ${targetChannel} is now ${actualValue} (expected ${value})`);
        }, 50);
      } else {
        console.log(`[DMX] ERROR: No target channel found for ${controlType} in fixture ${index}`, channels);
      }
    });
  };

  // OSC Address Management
  const updateOscAddress = (control: string, address: string) => {
    setOscAddresses(prev => ({
      ...prev,
      [control]: address
    }));
  };
  return (
    <div className={styles.superControl}>
      <div className={styles.header}>
        <h3>
          <LucideIcon name="Settings" />
          Super Control
        </h3>
        <p>Advanced DMX Control Interface</p>
        <div className={styles.headerActions}>
          <button
            className={styles.touchOscBtn}
            onClick={() => setShowTouchOscExport(true)}
            title="Export TouchOSC Layout"
          >
            <LucideIcon name="Smartphone" />
            TouchOSC
          </button>
          <button
            className={styles.helpBtn}
            title="Show OSC Addresses"
          >
            <LucideIcon name="HelpCircle" />
            OSC Help
          </button>
        </div>
      </div>

      {/* Basic Controls */}
      <div className={styles.controlsSection}>
        <div className={styles.sectionHeader}>
          <h4>Basic Controls</h4>
        </div>
        
        <div className={styles.controlGrid}>
          {/* Dimmer Control */}
          <div className={styles.controlRow}>
            <label>Dimmer</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={dimmer}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setDimmer(val);
                  applyControl('dimmer', val);
                }}
                className={styles.slider}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={dimmer}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setDimmer(val);
                  applyControl('dimmer', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.dimmer}</span>
            </div>
          </div>

          {/* Pan Control */}
          <div className={styles.controlRow}>
            <label>Pan</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={panValue}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setPanValue(val);
                  applyControl('pan', val);
                }}
                className={styles.slider}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={panValue}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setPanValue(val);
                  applyControl('pan', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.pan}</span>
            </div>
          </div>

          {/* Tilt Control */}
          <div className={styles.controlRow}>
            <label>Tilt</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={tiltValue}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setTiltValue(val);
                  applyControl('tilt', val);
                }}
                className={styles.slider}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={tiltValue}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setTiltValue(val);
                  applyControl('tilt', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.tilt}</span>
            </div>
          </div>

          {/* Color Controls */}
          <div className={styles.controlRow}>
            <label style={{ color: '#ff0000' }}>Red</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={red}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setRed(val);
                  applyControl('red', val);
                }}
                className={styles.slider}
                style={{ accentColor: '#ff0000' }}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={red}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setRed(val);
                  applyControl('red', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.red}</span>
            </div>
          </div>

          <div className={styles.controlRow}>
            <label style={{ color: '#00ff00' }}>Green</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={green}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setGreen(val);
                  applyControl('green', val);
                }}
                className={styles.slider}
                style={{ accentColor: '#00ff00' }}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={green}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setGreen(val);
                  applyControl('green', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.green}</span>
            </div>
          </div>

          <div className={styles.controlRow}>
            <label style={{ color: '#0000ff' }}>Blue</label>
            <div className={styles.controlInputs}>
              <input 
                type="range" 
                min="0" 
                max="255" 
                value={blue}
                onChange={(e) => {
                  const val = parseInt(e.target.value);
                  setBlue(val);
                  applyControl('blue', val);
                }}
                className={styles.slider}
                style={{ accentColor: '#0000ff' }}
              />
              <input 
                type="number" 
                min="0" 
                max="255" 
                value={blue}
                onChange={(e) => {
                  const val = parseInt(e.target.value) || 0;
                  setBlue(val);
                  applyControl('blue', val);
                }}
                className={styles.valueInput}
              />
              <span className={styles.oscAddress}>{oscAddresses.blue}</span>
            </div>
          </div>
        </div>
      </div>

      {/* TouchOSC Export Modal */}
      {showTouchOscExport && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <div className={styles.modalHeader}>
              <h3>Export TouchOSC Layout</h3>
              <button
                className={styles.closeBtn}
                onClick={() => setShowTouchOscExport(false)}
              >
                <LucideIcon name="X" />
              </button>
            </div>
            <div className={styles.modalBody}>
              <p>Export the current SuperControl layout to a TouchOSC (.tosc) file.</p>
              
              {touchOscExportStatus.isExporting ? (
                <div className={styles.exportProgress}>
                  <div className={styles.spinner}></div>
                  <p>{touchOscExportStatus.message}</p>
                </div>
              ) : touchOscExportStatus.message ? (
                <div className={`${styles.exportMessage} ${touchOscExportStatus.isSuccess ? styles.success : styles.error}`}>
                  <p>{touchOscExportStatus.message}</p>
                </div>
              ) : null}
              
              <div className={styles.exportOptions}>
                <h4>Export Options</h4>
                <label>
                  <input
                    type="checkbox"
                    checked={touchOscExportOptions.includeBasicControls}
                    onChange={(e) => setTouchOscExportOptions(prev => ({
                      ...prev,
                      includeBasicControls: e.target.checked
                    }))}
                  />
                  Include Basic Controls
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={touchOscExportOptions.includePanTilt}
                    onChange={(e) => setTouchOscExportOptions(prev => ({
                      ...prev,
                      includePanTilt: e.target.checked
                    }))}
                  />
                  Include Pan/Tilt Controls
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={touchOscExportOptions.includeColorWheel}
                    onChange={(e) => setTouchOscExportOptions(prev => ({
                      ...prev,
                      includeColorWheel: e.target.checked
                    }))}
                  />
                  Include Color Wheel
                </label>
              </div>
              
              <div className={styles.modalActions}>
                <button
                  className={styles.exportBtn}
                  onClick={handleTouchOscExport}
                  disabled={touchOscExportStatus.isExporting}
                >
                  <LucideIcon name="Download" />
                  Export Layout
                </button>
                <button
                  className={styles.cancelBtn}
                  onClick={() => setShowTouchOscExport(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SuperControl;
