.fixtureCanvasContainer {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  border: 1px solid var(--border-color-soft, #ddd);
  border-radius: var(--border-radius-md, 6px);
  background: var(--bg-secondary, #f9f9f9);
  height: 100%; // Take full available height
  min-height: 600px; // Ensure minimum height
  overflow: visible; // Changed from hidden to allow canvas to display fully
  
  // Fullscreen styles
  &.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1000;
    border: none;
    border-radius: 0;
    padding: 0.5rem;
    background: var(--bg-primary, #fff);
    gap: 0.5rem;
    
    // Enhanced canvas sizing in fullscreen
    .canvasContainer {
      flex: 1;
      min-height: calc(100vh - 120px); // Account for controls
    }
    
    .fixtureCanvas {
      min-height: calc(100vh - 160px); // Maximize canvas space
    }
    
    // Compact controls in fullscreen
    .controls {
      padding-bottom: 0.5rem;
      gap: 0.75rem;
    }
    
    // Hide or compact certain elements in fullscreen if needed
    .masterSliderConfigPanel,
    .placedControlConfigPanel,
    .placedFixtureConfigPanel {
      max-height: calc(100vh - 200px);
      overflow-y: auto;
    }
  }
}

.controls {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--border-color-soft, #ddd);
  flex-wrap: wrap; // Allow controls to wrap
}

.uploadControl {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.uploadLabel {
  font-size: 0.9rem;
  color: var(--text-secondary);
}

.uploadInput {
  font-size: 0.9rem;
  padding: 0.3rem 0.5rem;
  border-radius: var(--border-radius-sm, 4px);
  border: 1px solid var(--border-color-strong, #ccc);
  background-color: var(--bg-primary);
  color: var(--text-primary);

  &:hover {
    border-color: var(--accent-color, #4ecdc4);
  }
}

.fixtureCanvas {
  border: 1px solid var(--border-color-strong, #ccc);
  border-radius: var(--border-radius-sm, 4px);
  background-color: #f0f0f0; // Explicit background for the canvas itself
  cursor: crosshair; // Indicate it's a drawing surface
  // Make canvas responsive and flexible
  width: 100%;
  height: auto;
  min-height: 400px; // Ensure minimum height
  flex: 1; // Allow canvas to grow and fill available space
  transition: all 0.2s ease;
  
  &.dragging {
    cursor: grabbing;
    user-select: none;
  }
  
  &.snapping {
    cursor: crosshair;
  }
}

/* Enhanced dragging and animation styles */
@keyframes dragPulse {
  0% { 
    transform: scale(1); 
    opacity: 1; 
  }
  50% { 
    transform: scale(1.05); 
    opacity: 0.8; 
  }
  100% { 
    transform: scale(1); 
    opacity: 1; 
  }
}

@keyframes snapIndicator {
  0% { 
    transform: scale(0.8);
    opacity: 0.5;
  }
  50% { 
    transform: scale(1.2);
    opacity: 1;
  }
  100% { 
    transform: scale(1);
    opacity: 0.8;
  }
}

@keyframes placementPreview {
  0%, 100% {
    opacity: 0.6;
    transform: scale(0.95);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.05);
  }
}

@keyframes gridHighlight {
  0% {
    opacity: 0.3;
  }
  50% {
    opacity: 0.7;
  }
  100% {
    opacity: 0.3;
  }
}

.dragElement {
  animation: dragPulse 1s ease-in-out infinite;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.snapPreview {
  animation: snapIndicator 0.3s ease-in-out;
}

.placementPreview {
  animation: placementPreview 1.5s ease-in-out infinite;
}

.gridHighlight {
  animation: gridHighlight 1s ease-in-out infinite;
}

/* Visual feedback for dragging states */
.isDragging {
  .fixtureCanvas {
    background-color: rgba(240, 240, 240, 0.9);
    box-shadow: inset 0 0 20px rgba(0, 255, 0, 0.1);
  }
}

.isSnapping {
  .fixtureCanvas {
    background-color: rgba(255, 165, 0, 0.05);
    box-shadow: inset 0 0 10px rgba(255, 165, 0, 0.2);
  }
}

/* Smooth transitions for elements */
.smoothTransition {
  transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);
}

.snapTransition {
  transition: all 0.15s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.masterControls {
  margin-left: auto; // Pushes this section to the right if space allows
}

.addMasterButton {
  padding: 0.5rem 1rem;
  border: 1px solid var(--accent-color-secondary, #8855ff);
  color: var(--accent-color-secondary, #8855ff);
  background-color: transparent;
  border-radius: var(--border-radius-md, 6px);
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background-color: rgba(var(--accent-secondary-rgb, 136, 85, 255), 0.1);
    border-color: var(--accent-color-secondary-dark, #6a3ddf);
    color: var(--accent-color-secondary-dark, #6a3ddf);
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
}

.gridSnapToggle {
  padding: 0.5rem 1rem;
  border: 1px solid var(--border-color-strong, #ccc);
  color: var(--text-secondary);
  background-color: var(--bg-primary);
  border-radius: var(--border-radius-md, 6px);
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-width: 120px;
  justify-content: center;

  &:hover {
    border-color: var(--accent-color, #4ecdc4);
    color: var(--text-primary);
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }

  &.active {
    background-color: var(--accent-color, #4ecdc4);
    border-color: var(--accent-color-dark, #3aa89b);
    color: white;
    font-weight: 500;
    box-shadow: 0 2px 4px rgba(var(--accent-rgb, 78, 205, 196), 0.3);

    &:hover {
      background-color: var(--accent-color-dark, #3aa89b);
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(var(--accent-rgb, 78, 205, 196), 0.4);
    }
  }

  // Add icon styling if icons are used
  svg, i {
    font-size: 1rem;
    transition: transform 0.2s ease;
  }
  &.active svg,
  &.active i {
    transform: scale(1.1);
  }
}

.fullscreenToggle {
  padding: 0.5rem 1rem;
  border: 1px solid var(--border-color-strong, #ccc);
  color: var(--text-secondary);
  background-color: var(--bg-primary);
  border-radius: var(--border-radius-md, 6px);
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-width: 140px;
  justify-content: center;

  &:hover {
    border-color: var(--accent-color, #4ecdc4);
    color: var(--text-primary);
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }

  &.active {
    background-color: var(--accent-color-secondary, #8855ff);
    border-color: var(--accent-color-secondary-dark, #6a3ddf);
    color: white;
    font-weight: 500;
    box-shadow: 0 2px 4px rgba(136, 85, 255, 0.3);

    &:hover {
      background-color: var(--accent-color-secondary-dark, #6a3ddf);
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(136, 85, 255, 0.4);
    }
  }

  svg, i {
    font-size: 1rem;
    transition: transform 0.2s ease;
  }

  &.active svg,
  &.active i {
    transform: scale(1.1);
  }
}

/* Placed Control Configuration Panel Styles */
.placedControlConfigPanel {
  border: 1px solid var(--border-color-strong, #ccc);
  border-radius: var(--border-radius-md, 6px);
  padding: 1rem;
  background-color: var(--bg-secondary, #f9f9f9);
  width: 280px; 
  min-width: 280px; // Ensure minimum width
  max-width: 400px; // Allow some flexibility
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  margin-left: 1rem; // Positioned next to other panels if canvasWrapper arranges them
  flex-shrink: 0; // Prevent shrinking
  
  // Responsive behavior
  @media (max-width: 1200px) {
    width: 100%; // Full width when stacked
    max-width: none;
    margin-left: 0;
  }

  h4 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-color-soft, #ddd);
    padding-bottom: 0.5rem;
  }
  // Reuses .formGroup, .deleteButton, .closeButton from masterSliderConfigPanel styles
  
  .existingTargetsList {
    max-height: 120px;
    overflow-y: auto;
    margin-bottom: 0.75rem;
    padding: 0.5rem;
    background: var(--bg-primary-alpha, rgba(255,255,255,0.5));
    border-radius: var(--border-radius-sm);
  }

  .targetItem {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.4rem;
    border-bottom: 1px dashed var(--border-color-soft, #eee);
    font-size: 0.85rem;

    &:last-child {
      border-bottom: none;
    }

    span { // Overriding the block span from .formGroup inside this specific context
      display: inline;
      width: auto;
      padding: 0;
      border: none;
    }
  }

  .removeTargetButton {
    background: transparent;
    border: none;
    color: var(--color-danger, #e74c3c);
    cursor: pointer;
    font-size: 0.9rem;
    padding: 0.2rem 0.4rem;

    &:hover {
      color: var(--color-danger-dark, #c0392b);
      font-weight: bold;
    }
  }

  .addTargetForm {
    margin-top: 0.5rem;
    padding-top: 0.5rem;
    border-top: 1px solid var(--border-color-soft, #ddd);
    
    h6 {
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
      color: var(--text-secondary);
    }
  }
}

/* Placed Fixture Configuration Panel Styles */
.placedFixtureConfigPanel {
  border: 1px solid var(--border-color-strong, #ccc);
  border-radius: var(--border-radius-md, 6px);
  padding: 1rem;
  background-color: var(--bg-secondary, #f9f9f9);
  width: 280px; // Fixed width for the panel
  min-width: 280px; // Ensure minimum width
  max-width: 400px; // Allow some flexibility
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  margin-left: 1rem; // If canvasWrapper is not used, or ensure spacing
  flex-shrink: 0; // Prevent shrinking
  
  // Responsive behavior
  @media (max-width: 1200px) {
    width: 100%; // Full width when stacked
    max-width: none;
    margin-left: 0;
  }

  h4 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-color-soft, #ddd);
    padding-bottom: 0.5rem;
  }

  .existingControlsList {
    margin-bottom: 1rem;
    max-height: 150px; // Scroll if many controls
    overflow-y: auto;
    padding: 0.5rem;
    background: var(--bg-primary-alpha, rgba(255,255,255,0.5));
    border-radius: var(--border-radius-sm);
  }

  .noControlsText {
    font-size: 0.85rem;
    color: var(--text-meta);
    text-align: center;
    padding: 1rem 0;
  }

  .controlItem {
    padding: 0.4rem 0;
    border-bottom: 1px dashed var(--border-color-soft, #eee);
    font-size: 0.9rem;
    &:last-child {
      border-bottom: none;
    }
  }
  
  .addControlSection {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color-soft, #ddd);

    h5 {
      font-size: 1rem;
      margin-bottom: 0.75rem;
    }
  }

  .formGroup { // Reusing from masterSliderConfigPanel, ensure it's generic enough
    margin-bottom: 0.8rem;

    label {
      display: block;
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-bottom: 0.3rem;
    }

    select { // Specific styling for select if needed
      width: 100%;
      padding: 0.5rem;
      border-radius: var(--border-radius-sm, 4px);
      border: 1px solid var(--border-color-strong, #ccc);
      font-size: 0.9rem;
      background-color: var(--bg-primary);
      color: var(--text-primary);
    }
  }

  .addButton { // Generic add button style
    width: 100%;
    padding: 0.6rem;
    border-radius: var(--border-radius-md, 6px);
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    background-color: var(--accent-color, #4ecdc4);
    color: #f0f0f0;
    border: none;
    margin-top: 0.5rem;

    &:hover {
      background-color: var(--accent-color-dark, #3aa89b);
    }
    &:disabled {
      background-color: var(--bg-tertiary, #e0e0e0);
      color: var(--text-meta);
      cursor: not-allowed;
    }
  }
}


/* Master Slider Configuration Panel Styles */
.canvasContainer {
  flex: 1; // Take up remaining space
  display: flex;
  flex-direction: column;
  min-width: 0; // Allow shrinking below content width
  overflow: visible; // Changed from hidden to allow canvas to display fully
  min-height: 400px; // Ensure minimum height for canvas
  
  // In fullscreen, maximize canvas space
  .fixtureCanvasContainer.fullscreen & {
    flex: 1;
    min-height: calc(100vh - 200px); // Account for controls and padding
    overflow: visible; // Ensure overflow is visible in fullscreen too
  }
}

.canvasWrapper {
  display: flex;
  gap: 1rem;
  align-items: flex-start; // Align canvas and config panel at the top
  flex-wrap: wrap; // Allow wrapping on smaller screens
  min-height: 400px; // Reduced from 500px to allow better fitting
  flex: 1; // Allow wrapper to grow and fill available space
  
  // Responsive behavior for fullscreen and smaller viewports
  @media (max-width: 1200px) {
    flex-direction: column; // Stack vertically on smaller screens
    align-items: stretch;
  }
    // In fullscreen, prioritize canvas space
  .fixtureCanvasContainer.fullscreen & {
    flex-direction: row;
    align-items: flex-start;
    min-height: calc(100vh - 200px); // Maximize space in fullscreen
  }
}

.masterSliderConfigPanel {
  border: 1px solid var(--border-color-strong, #ccc);
  border-radius: var(--border-radius-md, 6px);
  padding: 1rem;
  background-color: var(--bg-secondary, #f9f9f9);
  width: 280px; // Fixed width for the panel
  min-width: 280px; // Ensure minimum width
  max-width: 400px; // Allow some flexibility
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  flex-shrink: 0; // Prevent shrinking
  
  // Responsive behavior
  @media (max-width: 1200px) {
    width: 100%; // Full width when stacked
    max-width: none;
  }

  h4 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-color-soft, #ddd);
    padding-bottom: 0.5rem;
  }

  .formGroup {
    margin-bottom: 0.8rem;

    label {
      display: block;
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-bottom: 0.3rem;
    }

    input[type="text"],
    span {
      display: block;
      width: calc(100% - 1rem); // Account for padding if any
      padding: 0.5rem;
      border-radius: var(--border-radius-sm, 4px);
      border: 1px solid var(--border-color-strong, #ccc);
      font-size: 0.9rem;
    }
    
    span { // For read-only value
      background-color: var(--bg-primary, #fff);
      min-height: 2.2em; // Match input height roughly
      line-height: 1.2em;
    }
  }
  
  .panelMidiLearnButton {
    // Inherits from MidiLearnButton.module.scss, can add overrides
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.2rem;
  }

  .targetsSection {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding-top: 0.5rem;
    border-top: 1px solid var(--border-color-soft, #ddd);
    
    h5 {
      margin-bottom: 0.5rem;
      font-size: 1rem;
    }
    // Placeholder text style
    p {
        font-size: 0.85rem;
        color: var(--text-meta);
    }
  }

  .deleteButton, .closeButton {
    width: calc(50% - 0.25rem); // Two buttons side-by-side with a small gap
    padding: 0.6rem;
    border-radius: var(--border-radius-md, 6px);
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    margin-top: 0.5rem;
  }

  .deleteButton {
    background-color: var(--color-danger, #e74c3c);
    color: #f0f0f0;
    border: none;
    margin-right: 0.5rem;

    &:hover {
      background-color: var(--color-danger-dark, #c0392b);
    }
  }

  .closeButton {
    background-color: var(--bg-tertiary, #e0e0e0);
    color: var(--text-primary);
    border: 1px solid var(--border-color-strong, #ccc);

    &:hover {
      background-color: var(--border-color-soft, #d5d5d5);
    }
  }
}


.fixturePalette {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.paletteLabel {
  font-size: 0.9rem;
  color: var(--text-secondary);
  margin-right: 0.5rem;
}

.noFixtures {
  font-size: 0.85rem;
  color: var(--text-meta);
}

.fixtureSelectItem {
  padding: 0.4rem 0.8rem;
  border: 1px solid var(--border-color-strong, #ccc);
  border-radius: var(--border-radius-sm, 4px);
  cursor: pointer;
  font-size: 0.85rem;
  color: #f0f0f0; // Text color will be #f0f0f0 for colored buttons
  transition: all 0.2s ease;
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);

  &:hover {
    opacity: 0.85;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  &.selected {
    border-width: 2px;
    border-color: var(--accent-color-dark, #3aa89b); // Darker accent for selection
    transform: scale(1.05);
    box-shadow: 0 3px 6px rgba(0,0,0,0.15);
    font-weight: bold;
  }
}

// Multi-select controls
.multiSelectControls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  background-color: rgba(var(--accent-color-rgb, 78, 205, 196), 0.1);
  border: 1px solid var(--border-color-soft, #ddd);
  border-radius: var(--border-radius-md, 6px);
  flex-wrap: wrap;
}

.selectionInfo {
  font-size: 0.85rem;
  color: var(--text-secondary);
  padding: 0.25rem 0.5rem;
  background-color: var(--bg-primary);
  border-radius: var(--border-radius-sm, 4px);
  border: 1px solid var(--border-color-soft, #ddd);
  min-width: 80px;
  text-align: center;
}

.selectAllButton,
.clearSelectionButton,
.invertSelectionButton,
.deleteSelectedButton {
  padding: 0.4rem 0.8rem;
  border: 1px solid var(--border-color-strong, #ccc);
  background-color: var(--bg-primary);
  color: var(--text-primary);
  border-radius: var(--border-radius-sm, 4px);
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;

  &:hover:not(:disabled) {
    background-color: var(--accent-color, #4ecdc4);
    color: white;
    border-color: var(--accent-color-dark, #3aa89b);
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background-color: var(--bg-tertiary, #f5f5f5);
    color: var(--text-disabled, #999);
  }
}

.deleteSelectedButton {
  background-color: rgba(255, 69, 58, 0.1);
  border-color: #ff453a;
  color: #ff453a;

  &:hover:not(:disabled) {
    background-color: #ff453a;
    color: white;
    border-color: #d70015;
  }
}

.selectAllButton {
  background-color: rgba(52, 199, 89, 0.1);
  border-color: #34c759;
  color: #34c759;

  &:hover:not(:disabled) {
    background-color: #34c759;
    color: white;
    border-color: #248a3d;
  }
}

.clearSelectionButton {
  background-color: rgba(255, 149, 0, 0.1);
  border-color: #ff9500;
  color: #ff9500;

  &:hover:not(:disabled) {
    background-color: #ff9500;
    color: white;
    border-color: #d07000;
  }
}

.invertSelectionButton {
  background-color: rgba(175, 82, 222, 0.1);
  border-color: #af52de;
  color: #af52de;

  &:hover:not(:disabled) {
    background-color: #af52de;
    color: white;
    border-color: #8944ab;
  }
}
